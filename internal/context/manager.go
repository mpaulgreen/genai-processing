package context

import (
	"fmt"
	"sync"
	"time"

	"genai-processing/pkg/interfaces"
	"genai-processing/pkg/types"
)

// ContextManager implements the ContextManager interface for managing conversation context and state.
// This implementation provides in-memory storage for conversation sessions and basic context management.
type ContextManager struct {
	// sessions stores conversation contexts indexed by session ID
	sessions map[string]*types.ConversationContext

	// mutex for thread-safe access to sessions map
	mu sync.RWMutex
}

// NewContextManager creates a new instance of ContextManager with initialized in-memory storage.
func NewContextManager() interfaces.ContextManager {
	return &ContextManager{
		sessions: make(map[string]*types.ConversationContext),
	}
}

// UpdateContext updates the conversation context with new query and response data.
// This method maintains the conversation history and updates the context
// with the latest interaction for future reference and pronoun resolution.
//
// Parameters:
//   - sessionID: Unique identifier for the conversation session
//   - query: The natural language query from the user
//   - response: The structured response generated by the system
//
// Returns:
//   - error: Any error that occurred during context update
func (cm *ContextManager) UpdateContext(sessionID string, query string, response *types.StructuredQuery) error {
	cm.mu.Lock()
	defer cm.mu.Unlock()

	// Get or create session context
	context, exists := cm.sessions[sessionID]
	if !exists {
		// Create new session context if it doesn't exist
		context = &types.ConversationContext{
			SessionID:    sessionID,
			UserID:       "", // TODO: Extract user ID from session or request
			CreatedAt:    time.Now(),
			LastActivity: time.Now(),
		}
		cm.sessions[sessionID] = context
	} else {
		// Update last activity for existing session
		context.LastActivity = time.Now()
	}

	// TODO: Store query and response in conversation history
	// TODO: Implement conversation history tracking
	// TODO: Store resolved references for pronoun resolution

	return nil
}

// ResolvePronouns resolves pronouns and references in a query using conversation context.
// This method handles the resolution of pronouns like "he", "she", "that user",
// "around that time", etc., by referencing the conversation history.
//
// Parameters:
//   - query: The query containing pronouns to resolve
//   - sessionID: Unique identifier for the conversation session
//
// Returns:
//   - string: The query with resolved pronouns and references
//   - error: Any error that occurred during pronoun resolution
func (cm *ContextManager) ResolvePronouns(query string, sessionID string) (string, error) {
	// TODO: Implement pronoun resolution logic
	// TODO: Access conversation history for context
	// TODO: Resolve references like "he", "she", "that user", "around that time"
	// TODO: Return resolved query with substituted references

	// For now, return the input unchanged as a stub implementation
	return query, nil
}

// GetContext retrieves the current conversation context for a session.
// This method provides access to the conversation history and context
// information needed for maintaining conversation state.
//
// Parameters:
//   - sessionID: Unique identifier for the conversation session
//
// Returns:
//   - ConversationContext: The current conversation context
//   - error: Any error that occurred while retrieving context
func (cm *ContextManager) GetContext(sessionID string) (*types.ConversationContext, error) {
	cm.mu.RLock()
	defer cm.mu.RUnlock()

	context, exists := cm.sessions[sessionID]
	if !exists {
		return nil, fmt.Errorf("session not found: %s", sessionID)
	}

	return context, nil
}

// GetSessionCount returns the number of active sessions for monitoring purposes.
// This is a helper method for testing and monitoring.
func (cm *ContextManager) GetSessionCount() int {
	cm.mu.RLock()
	defer cm.mu.RUnlock()
	return len(cm.sessions)
}

// ClearAllSessions removes all sessions from memory.
// This is a helper method for testing and cleanup purposes.
func (cm *ContextManager) ClearAllSessions() {
	cm.mu.Lock()
	defer cm.mu.Unlock()
	cm.sessions = make(map[string]*types.ConversationContext)
}
