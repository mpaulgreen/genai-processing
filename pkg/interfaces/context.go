package interfaces

import (
	"genai-processing/pkg/types"
)

// ContextManager defines the interface for managing conversation context and state.
// This interface handles the maintenance of conversation history, pronoun resolution,
// and context enrichment for multi-turn interactions.
type ContextManager interface {
	// UpdateContext updates the conversation context with new query and response data.
	// This method maintains the conversation history and updates the context
	// with the latest interaction for future reference and pronoun resolution.
	//
	// Parameters:
	//   - sessionID: Unique identifier for the conversation session
	//   - query: The natural language query from the user
	//   - response: The structured response generated by the system
	//
	// Returns:
	//   - error: Any error that occurred during context update
	UpdateContext(sessionID string, query string, response *types.StructuredQuery) error

	// UpdateContextWithUser updates context and associates it with a validated user ID.
	// If the session does not exist, it will be created with the provided user ID.
	// Implementations should validate and sanitize the user ID before storing.
	UpdateContextWithUser(sessionID string, userID string, query string, response *types.StructuredQuery) error

	// ResolvePronouns resolves pronouns and references in a query using conversation context.
	// This method handles the resolution of pronouns like "he", "she", "that user",
	// "around that time", etc., by referencing the conversation history.
	//
	// Parameters:
	//   - query: The query containing pronouns to resolve
	//   - sessionID: Unique identifier for the conversation session
	//
	// Returns:
	//   - string: The query with resolved pronouns and references
	//   - error: Any error that occurred during pronoun resolution
	ResolvePronouns(query string, sessionID string) (string, error)

	// GetContext retrieves the current conversation context for a session.
	// This method provides access to the conversation history and context
	// information needed for maintaining conversation state.
	//
	// Parameters:
	//   - sessionID: Unique identifier for the conversation session
	//
	// Returns:
	//   - ConversationContext: The current conversation context
	//   - error: Any error that occurred while retrieving context
	GetContext(sessionID string) (*types.ConversationContext, error)
}

// SessionManager defines the interface for managing session lifecycle and state.
// This interface handles session creation, maintenance, cleanup, and lifecycle
// management for conversation sessions.
type SessionManager interface {
	// CreateSession creates a new conversation session for a user.
	// This method initializes a new session with the provided user information
	// and returns a unique session identifier for future interactions.
	//
	// Parameters:
	//   - userID: Unique identifier for the user
	//
	// Returns:
	//   - string: Unique session identifier
	//   - error: Any error that occurred during session creation
	CreateSession(userID string) (string, error)

	// GetSession retrieves session information by session ID.
	// This method provides access to session metadata and state information
	// for session management and validation purposes.
	//
	// Parameters:
	//   - sessionID: Unique identifier for the session
	//
	// Returns:
	//   - ConversationContext: Session information and context
	//   - error: Any error that occurred while retrieving session
	GetSession(sessionID string) (*types.ConversationContext, error)

	// UpdateSession updates session information and extends its lifetime.
	// This method updates the session's last activity timestamp and any
	// other session metadata that needs to be maintained.
	//
	// Parameters:
	//   - sessionID: Unique identifier for the session
	//
	// Returns:
	//   - error: Any error that occurred during session update
	UpdateSession(sessionID string) error

	// DeleteSession removes a session and cleans up associated resources.
	// This method handles the cleanup of session data and context when
	// a session is no longer needed or has expired.
	//
	// Parameters:
	//   - sessionID: Unique identifier for the session to delete
	//
	// Returns:
	//   - error: Any error that occurred during session deletion
	DeleteSession(sessionID string) error

	// ListActiveSessions returns a list of all active sessions for a user.
	// This method provides visibility into active sessions for session
	// management and monitoring purposes.
	//
	// Parameters:
	//   - userID: Unique identifier for the user
	//
	// Returns:
	//   - []string: List of active session IDs for the user
	//   - error: Any error that occurred while listing sessions
	ListActiveSessions(userID string) ([]string, error)

	// CleanupExpiredSessions removes sessions that have exceeded their lifetime.
	// This method handles the automatic cleanup of expired sessions to
	// prevent resource accumulation and maintain system performance.
	//
	// Returns:
	//   - int: Number of sessions that were cleaned up
	//   - error: Any error that occurred during cleanup
	CleanupExpiredSessions() (int, error)
}
