# GenAI Processing Layer Configuration
# This file demonstrates the YAML configuration format with environment variable placeholders

server:
  port: "8080"
  host: "0.0.0.0"
  read_timeout: "30s"
  write_timeout: "30s"
  idle_timeout: "60s"
  shutdown_timeout: "10s"
  max_request_size: 1048576  # 1MB

models:
  default_provider: "claude"
  providers:
    claude:
      provider: "anthropic"
      endpoint: "https://api.anthropic.com/v1/messages"
      api_key: "${ANTHROPIC_API_KEY:-placeholder-key}"  # Environment variable with fallback
      model_name: "claude-3-5-sonnet-20241022"
      max_tokens: 4000
      temperature: 0.1
      timeout: "60s"
      retry_attempts: 3
      retry_delay: "1s"
      input_adapter: "claude_input_adapter"
      output_parser: "claude_extractor"
      prompt_formatter: "claude_formatter"
      parameters:
        top_p: "0.9"
        max_tokens_to_sample: "4000"
    
    openai:
      provider: "openai"
      endpoint: "https://api.openai.com/v1/chat/completions"
      api_key: "${OPENAI_API_KEY:-placeholder-key}"  # Environment variable with fallback
      model_name: "gpt-4"
      max_tokens: 4000
      temperature: 0.1
      timeout: "60s"
      retry_attempts: 3
      retry_delay: "1s"
      input_adapter: "openai_input_adapter"
      output_parser: "openai_extractor"
      prompt_formatter: "openai_formatter"
      parameters:
        top_p: "0.9"
        frequency_penalty: "0.0"
        presence_penalty: "0.0"
    
    local_llama:
      provider: "ollama"
      endpoint: "http://localhost:11434"
      api_key: ""  # No API key needed for local models
      model_name: "llama3.1:8b"
      max_tokens: 4000
      temperature: 0.1
      timeout: "60s"
      retry_attempts: 3
      retry_delay: "1s"
      input_adapter: "ollama_input_adapter"
      output_parser: "generic_extractor"
      prompt_formatter: "generic_formatter"
      parameters:
        num_ctx: "4096"
        num_thread: "4"

prompts:
  system_prompts:
    base: |
      You are an OpenShift audit query specialist. Convert natural language 
      queries into structured JSON parameters for audit log analysis.
      
      Always respond with valid JSON only. Do not include any markdown formatting,
      explanations, or additional text outside the JSON structure.
    
    claude_specific: |
      <instructions>
      You are an OpenShift audit query specialist. Convert natural language queries 
      into structured JSON parameters for audit log analysis.
      
      Respond with a JSON object that matches the provided schema exactly.
      </instructions>
    
    openai_specific: |
      You are an OpenShift audit query specialist. Your task is to convert natural 
      language queries into structured JSON parameters.
      
      Respond with valid JSON only - no markdown formatting or explanations.
  
  examples:
    - input: "Who deleted the customer CRD yesterday?"
      output: |
        {
          "log_source": "kube-apiserver",
          "verb": "delete",
          "resource": "customresourcedefinitions",
          "resource_name_pattern": "customer",
          "timeframe": "yesterday",
          "exclude_users": ["system:"],
          "limit": 20
        }
    
    - input: "Show me all failed authentication attempts in the last hour"
      output: |
        {
          "log_source": "oauth-server",
          "timeframe": "1_hour_ago",
          "auth_decision": "error",
          "limit": 20
        }
    
    - input: "Find all namespace creations by non-system users today"
      output: |
        {
          "log_source": "kube-apiserver",
          "verb": "create",
          "resource": "namespaces",
          "timeframe": "today",
          "exclude_users": ["system:", "kube-"],
          "limit": 20
        }
  
  formats:
    claude:
      template: |
        <instructions>
        {system_prompt}
        </instructions>
        
        <examples>
        {examples}
        </examples>
        
        <query>
        {query}
        </query>
        
        JSON Response:
    
    openai:
      template: "System: {system_prompt}\n\nExamples:\n{examples}\n\nUser: Convert this query to JSON: {query}"
      system_message: "{system_prompt}\n\nExamples:\n{examples}"
      user_message: "Convert this query to JSON: {query}"
    
    generic:
      template: |
        {system_prompt}
        
        Examples:
        {examples}
        
        Query: {query}
        
        JSON Response:
  
  validation:
    max_input_length: 1000
    max_output_length: 2000
    required_fields: ["log_source"]
    forbidden_words:
      - "rm -rf"
      - "delete --all"
      - "system:admin"
      - "drop database"
      - "format c:"

# Environment Variable Usage Examples:
# 
# 1. Set environment variables before running the application:
#    export ANTHROPIC_API_KEY="sk-ant-api03-your-actual-key"
#    export OPENAI_API_KEY="sk-your-actual-openai-key"
#
# 2. Or use a .env file:
#    ANTHROPIC_API_KEY=sk-ant-api03-your-actual-key
#    OPENAI_API_KEY=sk-your-actual-openai-key
#
# 3. The configuration will use the environment variable if set,
#    otherwise fall back to the placeholder value for testing.
